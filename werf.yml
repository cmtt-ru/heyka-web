configVersion: 1
project: heyka-web
deploy:
  helmRelease: "[[ project ]]-[[ env ]]"
  namespace: "heyka-[[ env ]]"

{{- define "Set timezone" }}
- name: "Set timezone"
  timezone:
   name: Europe/Moscow
{{- end }}

---
artifact: build
from: node:alpine

git:
- add: /
  to: /app
  excludePaths:
  - .helm
  - werf.yaml
  - .github
  stageDependencies:
    install:
    - "package.json"
    - "**/package.json"
    - "yarn.lock"
    setup:
    - "*/**"
ansible:
  beforeInstall:
  - name: "Install dependencies"
    apk:
      name:
        chromium,
        nss,
        freetype,
        freetype-dev,
        harfbuzz,
        ca-certificates,
        ttf-freefont,
        nodejs,
        yarn,
        git,
        openssh-client
  - name: "Install puppeteer"
    yarn:
      name: puppeteer
      version: '1.19.0'
      global: yes
    environment:
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
  - name: Ensure .ssh directory exists.
    file: 
      dest: "/root/.ssh"
      mode: 0700 
      state: directory
  - name: Update ssh config
    copy: 
      content: |-
        host *
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
          User git
          IdentityFile /root/.ssh/id_rsa
      dest: "/root/.ssh/config"
      mode: 0600
  - name: Update known hosts
    shell: |-
      touch /root/.ssh/known_hosts
      ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts
  - name: Generate ssh key
    shell: |-
      ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa
  install:
  - name: "npm install"
    shell: |
      npm ci
    args:
      chdir: /app
  setup:
  - name: "npm run"
    shell: |
      npm run build
    args:
      chdir: /app
    environment:
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser 

---
image: web
from: nginx:stable

import:
- artifact: build
  add: /app
  to: /app
  before: install
  owner: www-data
  group: www-data
  excludePaths:
    - ./node_modules

ansible:
  beforeInstall:
  - name: "Create non-root main application user"
    user:
      name: www-data
      comment: "Non-root main application user"
      uid: 7000
      shell: /bin/bash
      home: /app
  - name: "Install build dependencies"
    apt:
      name: [
        locales,
        tzdata,
        wget,
      ]
      update_cache: yes
{{- include "Set timezone" . | indent 2 }}
